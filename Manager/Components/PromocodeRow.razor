@using DioRed.Murka.Manager.Models

@inject DataProvider Data

<tr @onclick="OnClick" class="@(Selected ? "table-active" : "")">
    @if (Model != null)
    {
        <td>
            @Model.Code
            @if (Selected)
            {
                <br />
                <button type="button" class="btn btn-sm btn-link" @onclick:stopPropagation="true" @onclick="Update">Редактировать</button>
                @:|
                <button type="button" class="btn btn-sm btn-link" @onclick:stopPropagation="true" @onclick="Remove">Удалить</button>
            }
        </td>
        <td>
            @if (!string.IsNullOrEmpty(Model.ValidFrom))
            {
                @:с @Model.ValidFrom
            }
            @if (!string.IsNullOrEmpty(Model.ValidTo))
            {
                @: до @Model.ValidTo
            }
        </td>
        <td>@Model.Content</td>
    }
</tr>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    [Parameter] public PromocodeModel Model { get; set; } = default!;
    [Parameter] public bool Selected { get; set; }
    [Parameter] public EventCallback Clicked { get; set; }
    [Parameter] public EventCallback<PromocodeModel> Updated { get; set; }
    [Parameter] public EventCallback<PromocodeModel> Removed { get; set; }

    async Task OnClick() => await Clicked.InvokeAsync();

    async Task Update()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(PromocodeModal.Model), Model.Clone());
        parameters.Add(nameof(PromocodeModal.AllowCodeChange), false);

        var result = await Modal.Show<PromocodeModal>("Редактирование промокода", parameters).Result;
        if (result.Cancelled)
        {
            return;
        }

        var updated = (PromocodeModel)result.Data;
        try
        {
            if (Data.UpdatePromocode(updated))
            {
                Model.ValidFrom = updated.ValidFrom;
                Model.ValidTo = updated.ValidTo;
                Model.Content = updated.Content;

                await Updated.InvokeAsync(updated);
            }
        }
        catch
        {
        }
    }

    async Task Remove()
    {
        var result = await Modal.Show<ConfirmModal>($"Подтвердите удаление промокода {Model.Code}.").Result;
        if (result.Cancelled || !(bool)result.Data)
        {
            return;
        }

        try
        {
            if (Data.RemovePromocode(Model))
            {
                await Removed.InvokeAsync(Model);
            }
        }
        catch
        {
        }
    }
}