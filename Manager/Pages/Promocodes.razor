@page "/promocodes"

@using DioRed.Murka.Manager.Components
@using DioRed.Murka.Manager.Models
@using Grpc.Net.Client
@using Grpc.Net.Client.Web
@using System.ComponentModel.DataAnnotations

@inject DataProvider Data

<PageTitle>Промокоды</PageTitle>

<h1>Промокоды</h1>

@if (_promocodes is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <Alert @ref="_alert" />

    <button class="btn btn-link" @onclick="ShowAddPromocodeModal">Добавить промокод</button>

    <table class="table">
        <thead>
            <tr>
                <th>Код</th>
                <th>Срок действия</th>
                <th>Содержимое</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var promocode in _promocodes)
            {
                <PromocodeRow Model="promocode" Selected="@(promocode == _selectedPromocode)" Clicked="() => ToggleSelection(promocode)" Removed="() => Removed(promocode)" />
            }
        </tbody>
    </table>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private Alert _alert = default!;
    private ICollection<PromocodeModel>? _promocodes;
    private PromocodeModel? _selectedPromocode;

    protected override async Task OnInitializedAsync()
    {
        _promocodes = await Data.GetActivePromocodesAsync();

        await base.OnInitializedAsync();
    }

    private void ToggleSelection(PromocodeModel promocode)
    {
        if (_selectedPromocode == promocode)
        {
            _selectedPromocode = null;
        }
        else
        {
            _selectedPromocode = promocode;
        }
    }

    async Task ShowAddPromocodeModal()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(PromocodeModal.Model), new PromocodeModel());
        parameters.Add(nameof(PromocodeModal.AllowCodeChange), true);

        var result = await Modal.Show<PromocodeModal>("Добавление промокода", parameters).Result;
        if (result.Cancelled)
        {
            return;
        }

        var added = (PromocodeModel)result.Data!;
        try
        {
            if (await Data.AddPromocodeAsync(added))
            {
                _promocodes!.Add(added);

                _alert.Type = Alert.AlertType.Success;
                _alert.Text = $"Промокод {added.Code} успешно добавлен";
            }
            else
            {
                _alert.Type = Alert.AlertType.Warning;
                _alert.Text = $"Ошибка добавления промокода {added.Code}. Возможно, он уже добавлен.";
            }
        }
        catch
        {
            _alert.Type = Alert.AlertType.Danger;
            _alert.Text = "Ошибка при отправке запроса";
        }
    }

    void Removed(PromocodeModel promocode) => _promocodes?.Remove(promocode);
}
